eval("//# sourceURL=vendor/ember-cli/loader.js");

;eval("define(\"bumbox/adapters/application\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DS.RESTAdapter.extend({namespace: \'api\'});\n  });//# sourceURL=bumbox/adapters/application.js");

;eval("define(\"bumbox/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: \'bumbox\',\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, \'bumbox\');\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=bumbox/app.js");

;eval("define(\"bumbox/initializers/export-application-global\", \n  [\"ember\",\"bumbox/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    function initialize(container, application) {\n      var classifiedName = Ember.String.classify(config.modulePrefix);\n\n      if (config.exportApplicationGlobal) {\n        window[classifiedName] = application;\n      }\n    };\n    __exports__.initialize = initialize;\n    __exports__[\"default\"] = {\n      name: \'export-application-global\',\n\n      initialize: initialize\n    };\n  });//# sourceURL=bumbox/initializers/export-application-global.js");

;eval("define(\"bumbox/models/album-fixtures\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = [{\n      id: \"1\",\n      artwork: \"images/the-morning-after.jpg\",\n      name: \"The Morning After\",\n      artist: \"GOLDHOUSE\",\n      isExplicit: false,\n      songs: [ \"11\", \"12\", \"13\", \"14\" ]\n    }, {\n      id: \"2\",\n      artwork: \"images/dusk-to-dawn.jpg\",\n      name: \"Dusk to Dawn\",\n      artist: \"Emancipator\",\n      isExplicit: false,\n      songs: [ \"21\", \"22\", \"23\", \"24\" ]\n    }, {\n      id: \"3\",\n      artwork: \"images/the-heist.jpg\",\n      name: \"The Heist\",\n      artist: \"Macklemore & Ryan Lewis\",\n      isExplicit: true,\n      songs: [ \"31\", \"32\", \"33\", \"34\" ]\n    }, {\n      id: \"4\",\n      artwork: \"images/some-nights.jpg\",\n      name: \"Some Nights\",\n      artist: \"fun.\",\n      isExplicit: true,\n      songs: [ \"41\", \"42\", \"43\", \"44\" ]\n    }];\n  });//# sourceURL=bumbox/models/album-fixtures.js");

;eval("define(\"bumbox/router\", \n  [\"ember\",\"bumbox/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function() {\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=bumbox/router.js");

;eval("define(\"bumbox/routes/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend({\n      model: function() {\n      }\n    });\n  });//# sourceURL=bumbox/routes/application.js");

;eval("define(\"bumbox/serializers/application\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DS.RESTSerializer.extend({});\n  });//# sourceURL=bumbox/serializers/application.js");

;eval("define(\"bumbox/templates/application\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.HTMLBars.template((function() {\n      return {\n        isHTMLBars: true,\n        cachedFragment: null,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"header\");\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"h1\");\n          var el3 = dom.createTextNode(\"BümBöx\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"album-list\");\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"album\");\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"a\");\n          dom.setAttribute(el3,\"class\",\"ember-view\");\n          dom.setAttribute(el3,\"href\",\"/album/1\");\n          var el4 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"img\");\n          dom.setAttribute(el4,\"src\",\"images/the-morning-after.jpg\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"p\");\n          dom.setAttribute(el3,\"class\",\"album-name\");\n          var el4 = dom.createTextNode(\"The Morning After\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"p\");\n          dom.setAttribute(el3,\"class\",\"album-artist\");\n          var el4 = dom.createTextNode(\"GOLDHOUSE\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"p\");\n          dom.setAttribute(el3,\"class\",\"song-count\");\n          var el4 = dom.createTextNode(\"8 songs\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"album\");\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"a\");\n          dom.setAttribute(el3,\"class\",\"ember-view\");\n          dom.setAttribute(el3,\"href\",\"/album/1\");\n          var el4 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"img\");\n          dom.setAttribute(el4,\"src\",\"images/the-morning-after.jpg\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"p\");\n          dom.setAttribute(el3,\"class\",\"album-name\");\n          var el4 = dom.createTextNode(\"The Morning After\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"p\");\n          dom.setAttribute(el3,\"class\",\"album-artist\");\n          var el4 = dom.createTextNode(\"GOLDHOUSE\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"p\");\n          dom.setAttribute(el3,\"class\",\"song-count\");\n          var el4 = dom.createTextNode(\"8 songs\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"album\");\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"a\");\n          dom.setAttribute(el3,\"class\",\"ember-view\");\n          dom.setAttribute(el3,\"href\",\"/album/1\");\n          var el4 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"img\");\n          dom.setAttribute(el4,\"src\",\"images/the-morning-after.jpg\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"p\");\n          dom.setAttribute(el3,\"class\",\"album-name\");\n          var el4 = dom.createTextNode(\"The Morning After\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"p\");\n          dom.setAttribute(el3,\"class\",\"album-artist\");\n          var el4 = dom.createTextNode(\"GOLDHOUSE\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"p\");\n          dom.setAttribute(el3,\"class\",\"song-count\");\n          var el4 = dom.createTextNode(\"8 songs\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"album\");\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"a\");\n          dom.setAttribute(el3,\"class\",\"ember-view\");\n          dom.setAttribute(el3,\"href\",\"/album/1\");\n          var el4 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"img\");\n          dom.setAttribute(el4,\"src\",\"images/the-morning-after.jpg\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"p\");\n          dom.setAttribute(el3,\"class\",\"album-name\");\n          var el4 = dom.createTextNode(\"The Morning After\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"p\");\n          dom.setAttribute(el3,\"class\",\"album-artist\");\n          var el4 = dom.createTextNode(\"GOLDHOUSE\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"p\");\n          dom.setAttribute(el3,\"class\",\"song-count\");\n          var el4 = dom.createTextNode(\"8 songs\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"footer\");\n          dom.setAttribute(el1,\"class\",\"ember-view now-playing\");\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"span\");\n          dom.setAttribute(el2,\"class\",\"now-playing-empty\");\n          var el3 = dom.createTextNode(\"Select a song to start playing.\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          if (this.cachedFragment === null) {\n            this.cachedFragment = this.build(dom);\n          }\n          var fragment = dom.cloneNode(this.cachedFragment, true);\n          return fragment;\n        }\n      };\n    }()));\n  });//# sourceURL=bumbox/templates/application.js");

;eval("define(\"bumbox/tests/adapters/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - adapters\');\n    test(\'adapters/application.js should pass jshint\', function() { \n      ok(false, \'adapters/application.js should pass jshint.\\nadapters/application.js: line 1, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\nadapters/application.js: line 3, col 1, \\\'export\\\' is only available in ES6 (use esnext option).\\n\\n2 errors\'); \n    });\n  });//# sourceURL=bumbox/tests/adapters/application.jshint.js");

;eval("define(\"bumbox/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(false, \'app.js should pass jshint.\\napp.js: line 1, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\napp.js: line 2, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\napp.js: line 3, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\napp.js: line 14, col 1, \\\'export\\\' is only available in ES6 (use esnext option).\\n\\n4 errors\'); \n    });\n  });//# sourceURL=bumbox/tests/app.jshint.js");

;eval("define(\"bumbox/tests/bumbox-test-loader\", \n  [],\n  function() {\n    \"use strict\";\n    /* globals requirejs, require */\n\n    function testShouldBeLoaded(name) {\n      return isTestFile(name) && testStepIsBeforeUrlParam(name);\n    }\n\n    function jshintFileShouldBeLoaded(name) {\n      return !QUnit.urlParams.nojshint && name.match(/\\.jshint$/);\n    }\n\n    function isTestFile(name) {\n      return name.match(/[-_]test$/);\n    }\n\n    function paddedStepNumber(name) {\n      return name.match(/step-(\\d+)-test$/)[1];\n    }\n\n    function testStepIsBeforeUrlParam(name) {\n      var param = QUnit.urlParams[\'up-to-step\'];\n      // If nothing is selected include all steps\n      if (!param) { return true; }\n\n      var stepNumber = Number(paddedStepNumber(name));\n      var upToStepNumber = Number(param);\n      return stepNumber <= upToStepNumber;\n    }\n\n    // Collect all the files that match the test file pattern.\n    var availableTestFiles = Object.keys(requirejs.entries).filter(isTestFile);\n\n    // Collect a list of steps from all the test files\n    var availableStepValues = availableTestFiles.map(paddedStepNumber);\n\n    // Add config option to select what step a student is at in the course.\n    QUnit.config.urlConfig.push({\n      id: \"up-to-step\",\n      label: \"Up to step\",\n      value: availableStepValues,\n      tooltip: \"Pick the step that you are curently working on\"\n    });\n\n    // Add config option to disable jshint\n    QUnit.config.urlConfig.push({ id: \'nojshint\', label: \'Disable JSHint\'});\n\n    // Load correct modules for testing\n    availableTestFiles.forEach(function(moduleName) {\n      if (testShouldBeLoaded(moduleName) || jshintFileShouldBeLoaded(moduleName)) {\n        require(moduleName);\n      }\n    });\n\n    if (QUnit.notifications) {\n      QUnit.notifications({\n        icons: {\n          passed: \'/assets/passed.png\',\n          failed: \'/assets/failed.png\'\n        }\n      });\n    }\n  });//# sourceURL=bumbox/tests/bumbox-test-loader.js");

;eval("define(\"bumbox/tests/bumbox/tests/bumbox-test-loader.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests\');\n    test(\'bumbox/tests/bumbox-test-loader.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/bumbox-test-loader.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/bumbox-test-loader.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/helpers/assertions.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/helpers\');\n    test(\'bumbox/tests/helpers/assertions.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/helpers/assertions.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/helpers/assertions.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/helpers/lookup.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/helpers\');\n    test(\'bumbox/tests/helpers/lookup.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/helpers/lookup.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/helpers/lookup.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/helpers\');\n    test(\'bumbox/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/helpers/resolver.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/helpers\');\n    test(\'bumbox/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/helpers/start-app.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/helpers/step.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/helpers\');\n    test(\'bumbox/tests/helpers/step.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/helpers/step.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/helpers/step.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/integration/step-01-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/integration\');\n    test(\'bumbox/tests/integration/step-01-test.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/integration/step-01-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/integration/step-01-test.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/integration/step-02-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/integration\');\n    test(\'bumbox/tests/integration/step-02-test.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/integration/step-02-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/integration/step-02-test.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/integration/step-03-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/integration\');\n    test(\'bumbox/tests/integration/step-03-test.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/integration/step-03-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/integration/step-03-test.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/integration/step-04-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/integration\');\n    test(\'bumbox/tests/integration/step-04-test.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/integration/step-04-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/integration/step-04-test.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/integration/step-05-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/integration\');\n    test(\'bumbox/tests/integration/step-05-test.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/integration/step-05-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/integration/step-05-test.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/integration/step-06-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/integration\');\n    test(\'bumbox/tests/integration/step-06-test.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/integration/step-06-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/integration/step-06-test.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/integration/step-07-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/integration\');\n    test(\'bumbox/tests/integration/step-07-test.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/integration/step-07-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/integration/step-07-test.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/integration/step-08-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/integration\');\n    test(\'bumbox/tests/integration/step-08-test.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/integration/step-08-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/integration/step-08-test.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/integration/step-09-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/integration\');\n    test(\'bumbox/tests/integration/step-09-test.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/integration/step-09-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/integration/step-09-test.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/integration/step-10-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/integration\');\n    test(\'bumbox/tests/integration/step-10-test.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/integration/step-10-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/integration/step-10-test.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/integration/step-11-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/integration\');\n    test(\'bumbox/tests/integration/step-11-test.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/integration/step-11-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/integration/step-11-test.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/integration/step-12-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/integration\');\n    test(\'bumbox/tests/integration/step-12-test.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/integration/step-12-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/integration/step-12-test.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/integration/step-13-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/integration\');\n    test(\'bumbox/tests/integration/step-13-test.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/integration/step-13-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/integration/step-13-test.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/integration/step-14-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests/integration\');\n    test(\'bumbox/tests/integration/step-14-test.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/integration/step-14-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/integration/step-14-test.jshint.js");

;eval("define(\"bumbox/tests/bumbox/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - bumbox/tests\');\n    test(\'bumbox/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'bumbox/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=bumbox/tests/bumbox/tests/test-helper.jshint.js");

;eval("define(\"bumbox/tests/helpers/assertions\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /* global clearTimeout */\n\n    var Ember = __dependency1__[\"default\"];\n\n    function exists(selector) {\n      return !!count(selector);\n    }\n\n    __exports__.exists = exists;function count(selector) {\n      return find(selector).length;\n    }\n\n    __exports__.count = count;function not(state, message) {\n      ok(!state, message);\n    }\n\n    __exports__.not = not;function extractContents(selector) {\n      return find(selector).toArray().map(function(el) {\n        return $.trim(el.textContent);\n      });\n    }\n\n    __exports__.extractContents = extractContents;function extractAttributes(selector, attribute) {\n      return find(selector).toArray().map(function(el) {\n        return $(el).attr(attribute);\n      });\n    }\n\n    __exports__.extractAttributes = extractAttributes;function contentOf(selector) {\n      var el = find(selector)[0];\n      return $.trim(el.textContent);\n    }\n\n    __exports__.contentOf = contentOf;function propertyShouldBecome(object, property, expectedValue) {\n      var actualValue;\n\n      return new Ember.RSVP.Promise(function(resolve, reject) {\n        var observer = function() {\n          var correctValue, message;\n\n          actualValue = object.get(property);\n\n          if (typeof expectedValue === \'function\') {\n            if (expectedValue(actualValue)) {\n              correctValue = true;\n              message = \"The \" + property + \" property on \" + object + \" fulfills the condition\";\n            }\n          } else if (expectedValue === actualValue) {\n            correctValue = true;\n            message = \"The \" + property + \" property on \" + object + \" became \" + expectedValue;\n          }\n\n          if (correctValue) {\n            clearTimeout(timeout);\n            Ember.removeObserver(object, property, observer);\n            QUnit.push(true, null, null, message);\n            resolve();\n          }\n        };\n\n        var timeout = setTimeout(function() {\n          if (typeof expectedValue === \'function\') {\n            QUnit.push(false, null, null, \"The \" + property + \" property of \" + object + \" never fulfilled the condition\");\n          } else {\n            QUnit.push(actualValue === expectedValue, actualValue, expectedValue, \"The \" + property + \" property of \" + object + \" never became \" + expectedValue);\n          }\n\n          reject();\n        }, 3000);\n\n        Ember.addObserver(object, property, observer);\n      });\n    }\n\n    __exports__.propertyShouldBecome = propertyShouldBecome;function waitFor(object, property, callback) {\n      stop();\n\n      return new Ember.RSVP.Promise(function(resolve, reject) {\n        function observer() {\n          clearTimeout(timeout);\n          Ember.removeObserver(object, property, observer);\n          if (callback) {\n            Ember.run.next(callback);\n          }\n\n          Ember.run.next(function() {\n            start();\n            resolve();\n          });\n        }\n\n        Ember.addObserver(object, property, observer);\n\n        var timeout = setTimeout(function() {\n          start();\n          QUnit.push(false, null, null, \"Timed out waiting for \" + property + \" of \" + object + \" to become truthy\");\n          Ember.run(function() {\n            reject();\n          });\n        }, 3000);\n      });\n    }\n\n    __exports__.waitFor = waitFor;\n  });//# sourceURL=bumbox/tests/helpers/assertions.js");

;eval("define(\"bumbox/tests/helpers/lookup\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = function(app, key) {\n      return app.__container__.lookup(key);\n    }\n  });//# sourceURL=bumbox/tests/helpers/lookup.js");

;eval("define(\"bumbox/tests/helpers/resolver\", \n  [\"ember/resolver\",\"bumbox/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=bumbox/tests/helpers/resolver.js");

;eval("define(\"bumbox/tests/helpers/start-app\", \n  [\"ember\",\"bumbox/app\",\"bumbox/router\",\"bumbox/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      return App;\n    }\n  });//# sourceURL=bumbox/tests/helpers/start-app.js");

;eval("define(\"bumbox/tests/helpers/step\", \n  [\"bumbox/tests/helpers/start-app\",\"ember-qunit\",\"ember\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var startApp = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var Ember = __dependency3__[\"default\"];\n\n    __exports__[\"default\"] = function step(number, description, config) {\n      var App;\n\n      if (!config) {\n        config = {};\n      }\n\n      module(\"Step \" + pad(number, 2) + \": \" + description, {\n        setup: function() {\n          App = startApp();\n          if (config.setup) {\n            config.setup(App);\n          }\n        },\n\n        teardown: function() {\n          Ember.run(App, App.destroy);\n          if (config.teardown) {\n            config.teardown(App);\n          }\n        }\n      });\n    }\n\n    function pad(number, length) {\n      return new Array(Math.max(length - String(number).length + 1, 0)).join(0) + number;\n    }\n  });//# sourceURL=bumbox/tests/helpers/step.js");

;eval("define(\"bumbox/tests/integration/step-01-test\", \n  [\"ember-qunit\",\"bumbox/tests/helpers/assertions\",\"bumbox/tests/helpers/step\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    /*\n      In Step 1, you are going to load some models from fixture data in the\n      router.\n\n      Then, you\'ll use the {{#each}} helper that you learned about to print\n      each of the albums using a template.\n\n      Create a route handler for the application template, and make sure you set\n      its model to the list of albums. You\'re application route will look like this:\n\n      import Ember from \'ember\';\n      import Albums from \'bumbox/models/album-fixtures\';\n\n      export default Ember.Route.extend({\n        model: function() {\n          return Albums;\n        }\n      });\n\n      Delete all but one of the static albums in the application template.\n\n      Finally, use the {{#each}} helper to display the remaining HTML once per album\n      in the application. Use Handlebars expressions to print the album\'s name\n      and artist. Also render the correct source attribute for the artwork images.\n      (Don\'t worry about the song count for now.)\n    */\n\n    var test = __dependency1__.test;\n    var exists = __dependency2__.exists;\n    var count = __dependency2__.count;\n    var extractContents = __dependency2__.extractContents;\n    var extractAttributes = __dependency2__.extractAttributes;\n    var step = __dependency3__[\"default\"];\n\n    step(1, \'Rendering Albums\');\n\n    test(\"The album list is enclosed in a <div> with the class \'album-list\'\", function() {\n      visit(\'/\');\n\n      andThen(function() {\n        ok(exists(\'div.album-list\'), \"The album list is a <div class=\'album-list\'>\");\n      });\n    });\n\n    test(\"Each of the four albums should appear on the screen\", function() {\n      visit(\'/\');\n\n      andThen(function() {\n        equal(count(\'.album-list .album\'), 4, \"There should be four albums in the list\");\n\n        var albumNames = extractContents(\'.album .album-name\');\n        deepEqual(albumNames, [\'The Morning After\', \'Dusk to Dawn\', \'The Heist\', \'Some Nights\'], \"Each album title should be rendered\");\n\n        var artistNames = extractContents(\'.album .album-artist\');\n        deepEqual(artistNames, [\'GOLDHOUSE\', \'Emancipator\', \'Macklemore & Ryan Lewis\', \'fun.\'], \"Each album artist should be rendered\");\n\n        var artworkUrls = extractAttributes(\'.album img\', \'src\');\n        deepEqual(artworkUrls, [\"images/the-morning-after.jpg\", \"images/dusk-to-dawn.jpg\", \"images/the-heist.jpg\", \"images/some-nights.jpg\"], \"Each album artwork should be rendered\");\n      });\n    });\n  });//# sourceURL=bumbox/tests/integration/step-01-test.js");

;eval("define(\"bumbox/tests/integration/step-02-test\", \n  [\"ember-qunit\",\"bumbox/tests/helpers/assertions\",\"bumbox/tests/helpers/step\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    /*\n      For Step 3, use the `{{#if}}` helper to only show an \"EXPLICIT\" warning\n      about the album if the model\'s `isExplicit` property is true.\n\n      Your template should generate HTML that looks like this:\n\n        <div class=\"album\">\n          <a href=\"/album/1\">\n            <img src=\"images/1.jpg\">\n          </a>\n\n          <p class=\"album-name\">The Morning After</p>\n          <p class=\"artist-name\">GOLDHOUSE</p>\n          <p class=\"song-count\">\n            8 songs\n            <span class=\'explicit\'>EXPLICIT</span>\n          </p>\n        </div>\n\n      The span with the class name `explicit` should only appear for albums\n      whose `isExplicit` property is true.\n    */\n\n    var test = __dependency1__.test;\n    var not = __dependency2__.not;\n    var step = __dependency3__[\"default\"];\n\n    function albumIsExplicit(name) {\n      var el = findWithAssert(\'.album:has(.album-name:contains(\'+name+\'))\');\n      return el.find(\'.explicit:contains(EXPLICIT)\').length === 1;\n    }\n\n    step(2, \"Add Explicit Warning\");\n\n    test(\"Explicit albums should have a warning about their contents\", function() {\n      visit(\'/\');\n\n      andThen(function() {\n        not(albumIsExplicit(\'The Morning After\'), \"First album should not be explicit\");\n        not(albumIsExplicit(\'Dusk to Dawn\'), \"Second album should not be explicit\");\n        ok(albumIsExplicit(\'The Heist\'), \"Third album should be explicit\");\n        ok(albumIsExplicit(\'Some Nights\'), \"Fourth album should be explicit\");\n      });\n    });\n  });//# sourceURL=bumbox/tests/integration/step-02-test.js");

;eval("define(\"bumbox/tests/integration/step-03-test\", \n  [\"ember-qunit\",\"bumbox/tests/helpers/assertions\",\"bumbox/tests/helpers/lookup\",\"bumbox/tests/helpers/step\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__) {\n    \"use strict\";\n    /*\n      Up until now, you\'ve been putting all of your HTML in the\n      application template. However, as you just learned, creating\n      an app that supports multiple pages requires at least one outlet.\n\n      To get the tests for Step 4 passing, you\'ll need to make a few\n      structural changes.\n\n      1) Move all of the album-specific HTML out of the application\n         template and into a new `index` template.\n      2) Create a resource for `/album/:album_id` that renders a new\n         `album` template. For now, just make sure that it contains\n         a `div` with the `album-info` class.\n      3) You will need to make sure that each template has the\n         correct model provided by its route.\n\n      Remember that you can use `findProperty` to find the album\n      with a given `id` (You can see emberjs.com/guides/enumerables\n      for more information).\n    */\n\n    var test = __dependency1__.test;\n    var exists = __dependency2__.exists;\n    var lookup = __dependency3__[\"default\"];\n    var step = __dependency4__[\"default\"];\n\n    var App;\n    step(3, \"Add Resource\", {\n      setup: function(app) {\n        App = app;\n      }\n    });\n\n    test(\"When navigating to /album/1, an album template is rendered\", function() {\n      visit(\'/album/1\');\n\n      andThen(function() {\n        ok(exists(\'div.album-info\'), \"There should be a <div> with class \'album-info\'\");\n      });\n    });\n\n    test(\"When navigating to /album/1, the album with ID of 1 is the model on the route\", function() {\n      visit(\'/album/1\');\n\n      andThen(function() {\n        var albumRoute = lookup(App, \'route:album\');\n        ok(albumRoute.get(\'currentModel\'), \"The album route has a model\");\n        equal(albumRoute.get(\'currentModel\').id, 1, \"The album\'s ID is 1\");\n      });\n    });\n  });//# sourceURL=bumbox/tests/integration/step-03-test.js");

;eval("define(\"bumbox/tests/integration/step-04-test\", \n  [\"ember-qunit\",\"bumbox/tests/helpers/assertions\",\"bumbox/tests/helpers/step\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    /*\n      In this step, you\'ll create a link from the album list to an individual\n      album.\n\n      Go to the index template and wrap the image with the album artwork inside a\n      {{#link-to}} helper. Make sure to pass a parameter to the helper; this tells\n      the helper which model should go into the URL.\n    */\n\n    var test = __dependency1__.test;\n    var exists = __dependency2__.exists;\n    var step = __dependency3__[\"default\"];\n\n    step(4, \"Add a Link\");\n\n    test(\"Each album on the index page should have a link to the album page\", function() {\n      visit(\'/\');\n\n      andThen(function() {\n        [1, 2, 3, 4].forEach(function(id) {\n          ok(exists(\'.album a[href=\"/album/\'+id+\'\"]\'), \"There is a link for album \"+id);\n        });\n      });\n    });\n\n    test(\"Clicking on an album shows the album template\", function() {\n      visit(\'/\');\n      click(\'.album:first a\');\n\n      andThen(function() {\n        ok(exists(\'.album-info\'), \"Navigated to the album template\");\n      });\n    });\n  });//# sourceURL=bumbox/tests/integration/step-04-test.js");

;eval("define(\"bumbox/tests/integration/step-05-test\", \n  [\"ember-qunit\",\"bumbox/tests/helpers/step\",\"bumbox/tests/helpers/lookup\",\"ember\",\"bumbox/tests/helpers/resolver\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {\n    \"use strict\";\n    /*\n     In this step, we\'ll replace our fixture data with data from our server and Ember\n     Data objects\n\n     First, define the models for `Album` and `Song` by extending DS.Model.\n\n     Next, update our routes to use the `store` rather than the fixture data.\n\n     When you\'re finished, you should be able to delete the fixture data file and\n     still have all of your tests up to this step passing.\n    */\n\n    var test = __dependency1__.test;\n    var step = __dependency2__[\"default\"];\n    var lookup = __dependency3__[\"default\"];\n    var Ember = __dependency4__[\"default\"];\n    var resolver = __dependency5__[\"default\"];\n\n    var App;\n    step(5, \"Ember Data\", {\n      setup: function(app) {\n        App = app;\n      }\n    });\n\n    test(\"App.Song and App.Album have been defined\", function() {\n      var Album = resolver.resolve(\'model:album\');\n      ok(DS.Model.detect(Album), \"Album is a DS.Model subclass\");\n\n      var Song = resolver.resolve(\'model:song\');\n      ok(DS.Model.detect(Song), \"Song is a DS.Model subclass\");\n    });\n\n    test(\"A payload of albums and songs become associated data models\", function() {\n      expect(12);\n      var store = lookup(App, \'store:main\');\n\n      var payload = {\n        album: {\n          id: 1,\n          artwork: \'album-artwork\',\n          name: \'album-name\',\n          artist: \'album-artist\',\n          isExplicit: true,\n          songs: [1]\n        },\n\n        songs: [\n          {\n            id: 1,\n            track: \'5\',\n            name: \'song-name\',\n            duration: \'123\',\n            url: \'song-url\',\n            album: 1\n          }\n        ]\n      };\n\n      Ember.run(function() {\n        store.pushPayload(payload);\n      });\n\n      store.find(\'album\', 1).then(function(album) {\n        equal(album.get(\'id\'), 1, \"Album ID is set\");\n        equal(album.get(\'artwork\'), \'album-artwork\', \"Album artwork is set\");\n        equal(album.get(\'name\'), \'album-name\', \"Album name is set\");\n        equal(album.get(\'artist\'), \'album-artist\', \"Album artist is set\");\n        equal(album.get(\'isExplicit\'), true, \"Explicit flag is set\");\n\n        var song = album.get(\'songs.firstObject\');\n        ok(song, \"Album has the song inside of its songs collection\");\n\n        equal(song.get(\'id\'), 1, \"Song ID is set\");\n        strictEqual(song.get(\'track\'), 5, \"Song track is set\");\n        equal(song.get(\'name\'), \'song-name\', \"Song name is set\");\n        strictEqual(song.get(\'duration\'), 123, \"Song duration is set\");\n        equal(song.get(\'url\'), \'song-url\', \"Song url is set\");\n\n        ok(song.get(\'album\'), \"Song has a reference to the album\");\n      });\n    });\n\n    test(\"The album route returns an album model\", function() {\n      visit(\'/album/1\');\n\n      andThen(function() {\n        var album = lookup(App, \'route:album\').get(\'currentModel\');\n\n        ok(album instanceof DS.Model, \"model is an Ember Data model\");\n        equal(album.get(\'id\'), 1, \"route found album 1\");\n      });\n    });\n\n    test(\"The index route returns all the album models\", function() {\n      visit(\'/\');\n\n      andThen(function() {\n        var albums = lookup(App, \'route:index\').get(\'currentModel\');\n        var firstAlbum = albums.get(\'firstObject\');\n\n        ok(firstAlbum instanceof DS.Model, \"the model is an array of Ember Data models\");\n        equal(albums.get(\'length\'), 4, \"there are four album models\");\n      });\n    });\n  });//# sourceURL=bumbox/tests/integration/step-05-test.js");

;eval("define(\"bumbox/tests/integration/step-06-test\", \n  [\"ember-qunit\",\"bumbox/tests/helpers/assertions\",\"bumbox/tests/helpers/step\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    /**\n      In this step, you will apply the knowledge that you have learned\n      so far to build the list of songs.\n\n      To make the tests pass, you will need to create a template that\n      produces the following HTML for the song list.\n\n        <div class=\"album-info\">\n          <img src=\"artwork.png\">\n          <h1>Album Name</h1>\n          <h2>Artist Name</h2>\n        </div>\n\n        <table class=\"album-listing\">\n          <!-- this should repeat once for each song -->\n          <tr>\n            <td class=\"song-track\">\n              <span class=\"track-number\"><!-- track number --></span>\n            </td>\n            <td class=\"song-name\"><!-- song name --></td>\n            <td class=\"song-duration\"><!-- song duration --></td>\n          </tr>\n          <!-- end repeat -->\n          <tr>\n            <td class=\"total-duration\" colspan=\"3\">Total Time: 40:03</td>\n          </tr>\n        </table>\n\n      You can hardcode the total duration for now. We will update\n      it with a calculated value in a later step.\n    */\n\n    var test = __dependency1__.test;\n    var exists = __dependency2__.exists;\n    var count = __dependency2__.count;\n    var extractContents = __dependency2__.extractContents;\n    var step = __dependency3__[\"default\"];\n\n    step(6, \"Songs List\");\n\n    test(\"Information about the album is displayed\", function() {\n      visit(\'/\');\n      click(\'.album:first a\');\n\n      andThen(function() {\n        ok(exists(\'.album-info img[src=\"images/the-morning-after.jpg\"]\'), \"Has artwork\");\n        ok(exists(\'.album-info h1:contains(The Morning After)\'), \"Has album name\");\n        ok(exists(\'.album-info h2:contains(GOLDHOUSE)\'), \"Has artist name\");\n      });\n    });\n\n    test(\"It should have a list of songs\", function() {\n      visit(\'/\');\n      click(\'.album:first a\');\n\n      andThen(function() {\n        var trackNumbers = extractContents(\'.album-listing .song-track .track-number\');\n        deepEqual(trackNumbers, [\"1\", \"2\", \"3\", \"4\"], \"Each track number should be shown\");\n\n        var songNames = extractContents(\'.album-listing .song-name\');\n        deepEqual(songNames, [\"A Walk\", \"Hours\", \"Daydream\", \"Dive\"], \"Each song name should be shown\");\n\n        equal(count(\'.album-listing .song-duration:not(:empty)\'), 4, \"The duration information for four tracks should be displayed\");\n      });\n    });\n  });//# sourceURL=bumbox/tests/integration/step-06-test.js");

;eval("define(\"bumbox/tests/integration/step-07-test\", \n  [\"ember-qunit\",\"bumbox/tests/helpers/assertions\",\"bumbox/tests/helpers/step\",\"bumbox/tests/helpers/resolver\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__) {\n    \"use strict\";\n    /*\n      For this step, you will create a new helper called `format-duration` that\n      takes a number of seconds and turns it into a MM:SS formatted string.\n\n      For example, 75 seconds would become \"1:15\".\n\n      You will need to handle several edge-cases, such as when the number of\n      seconds is less than 10. The tests below cover all of the edge-cases\n      you need to worry about.\n\n      Here is the algorithm you should implement to satisfy the unit tests\n      below:\n\n      1. Divide the number of seconds by 60, and floor the result using Math.floor().\n         This is the number of whole minutes.\n      2. Get the remaining number of seconds by using the remainder (`%`) operator.\n      3. If the remainder is less than 10, construct the formatted seconds by\n         prepending a \"0\" to it. Otherwise, the formatted seconds is just the\n         remainder.\n      4. The formatted string is the number of minutes, followed by a \":\", followed\n         by the formatted seconds.\n      5. Return the formatted string.\n\n      If you are enterprising, you might try alternative strategies.\n\n      Once all of your unit tests are passing, update the `album` template to use\n      the `format-duration` helper to format the duration of each song. This should\n      make the integration tests pass.\n    */\n\n    var test = __dependency1__.test;\n    var moduleForComponent = __dependency1__.moduleForComponent;\n    var exists = __dependency2__.exists;\n    var step = __dependency3__[\"default\"];\n    var resolver = __dependency4__[\"default\"];\n\n    step(7, \"Add a Helper\");\n\n    test(\"The helper correctly formats number of seconds into human-readable strings\", function() {\n      var helper = resolver.resolve(\'helper:format-duration\');\n      ok(helper, \"The format-duration helper exists\");\n      helper = helper._rawFunction;\n\n      equal(helper(0), \'0:00\', \"0 is converted into 0:00\");\n      equal(helper(8), \'0:08\', \"Less than 10 seconds gets 0-padded\");\n      equal(helper(20), \'0:20\', \"Numbers with trailing zeros are not truncated\");\n      equal(helper(60), \'1:00\', \"Exactly 60 seconds is converted into 1:00\");\n      equal(helper(61), \'1:01\', \"Less than 10 seconds into a minute gets 0-padded\");\n      equal(helper(70), \'1:10\', \"Numbers with trailing zeros greater than one minute are not truncated\");\n      equal(helper(125), \'2:05\', \"The helper works with multiple minutes\");\n    });\n\n    test(\"Each album formats the duration in seconds as MM:SS\", function() {\n      visit(\'/album/1\');\n\n      andThen(function() {\n        [\'5:10\', \'7:24\', \'5:34\', \'8:19\'].forEach(function(duration) {\n          ok(exists(\'.album-listing .song-duration:contains(\'+duration+\')\'), \"Found an album with duration of: \" + duration);\n        });\n      });\n    });\n  });//# sourceURL=bumbox/tests/integration/step-07-test.js");

;eval("define(\"bumbox/tests/integration/step-08-test\", \n  [\"ember-qunit\",\"bumbox/tests/helpers/assertions\",\"bumbox/tests/helpers/lookup\",\"bumbox/tests/helpers/step\",\"ember\",\"bumbox/tests/helpers/resolver\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__) {\n    \"use strict\";\n    /*\n      In this step, you will add a total duration and song count for an album.\n\n      If you look at the listing for an album, you\'ll see that each song\n      has a duration in seconds. We\'d like to automatically compute the\n      duration of an album by summing the duration of each of its songs.\n\n      You\'ll do this using a computed property on the Album subclass you defined in\n      Step 8.\n\n      To make sure that the computed property updates appropriately,\n      you\'ll need to define its dependent key. Make sure you understand the\n      @each dependent key.\n    */\n\n    var test = __dependency1__.test;\n    var exists = __dependency2__.exists;\n    var contentOf = __dependency2__.contentOf;\n    var lookup = __dependency3__[\"default\"];\n    var step = __dependency4__[\"default\"];\n    var Ember = __dependency5__[\"default\"];\n    var resolver = __dependency6__[\"default\"];\n\n    var App;\n    step(8, \"Total duration and song count\", {\n      setup: function(app) {\n        App = app;\n      }\n    });\n\n    test(\"An Album correctly calculates totalDuration\", function() {\n      var store = lookup(App, \'store:main\'),\n          album;\n\n      Ember.run(function() {\n        album = store.createRecord(\'album\');\n\n        album.get(\'songs\').pushObjects([\n          store.createRecord(\'song\', { duration: 10 }),\n          store.createRecord(\'song\', { duration: 120 }),\n          store.createRecord(\'song\', { duration: 234 })\n        ]);\n      });\n\n      equal(album.get(\'totalDuration\'), 364, \"total duration is the sum of the song durations\");\n\n      Ember.run(function() {\n        album.get(\'songs\').createRecord({duration: 25});\n      });\n\n      equal(album.get(\'totalDuration\'), 389, \"total duration is updated when a new song is added\");\n\n      Ember.run(function() {\n        album.get(\'songs\').get(\'firstObject\').set(\'duration\', 20);\n      });\n\n      equal(album.get(\'totalDuration\'), 399, \"total duration is updated when a song\'s duration is changed\");\n\n      Ember.run(function() {\n        album.get(\'songs\').popObject();\n      });\n\n      equal(album.get(\'totalDuration\'), 374, \"total duration is updated when a song is removed\");\n    });\n\n    test(\"The total duration is displayed\", function() {\n      visit(\'/album/1\');\n\n      andThen(function() {\n        equal(contentOf(\'.total-duration\'), \'Total Time: 26:27\');\n      });\n    });\n\n    test(\"An Album correctly calculates songCount\", function() {\n      var store = lookup(App, \'store:main\'),\n          album;\n\n      Ember.run(function() {\n        album = store.createRecord(\'album\');\n\n        album.get(\'songs\').pushObjects([\n          store.createRecord(\'song\'),\n          store.createRecord(\'song\'),\n        ]);\n      });\n\n      equal(album.get(\'songCount\'), 2, \"adding songs increases the songCount\");\n\n      Ember.run(function() {\n        album.get(\'songs\').popObject();\n      });\n\n      equal(album.get(\'songCount\'), 1, \"removing a song decreases the songCount\");\n    });\n\n    test(\"The correct song count for albums is displayed\", function() {\n      visit(\'/\');\n\n      andThen(function() {\n        equal(contentOf(\'.song-count:first\'), \'4 songs\', \"The first album\'s song count is correct\");\n      });\n    });\n  });//# sourceURL=bumbox/tests/integration/step-08-test.js");

;eval("define(\"bumbox/tests/integration/step-09-test\", \n  [\"ember\",\"bumbox/tests/helpers/step\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    /*\n      In this step you\'ll replace the markup for a song in an album with a\n      component called song-row. This component will switch between a play and\n      pause button depending on whether the song is playing or not.\n\n      Note that the app has CSS that only shows the .play span when a user hovers\n      over a song-row.\n\n      When the song-row component is first rendered the play button should show.\n\n      <td class=\"song-track\">\n        <span class=\"track-number\">\n          1\n        </span>\n        <span class=\"play\">\n          <span>▶</span>\n        </span>\n      </td>\n      <td class=\"song-name\">Song name</td>\n      <td class=\"song-duration\">5:23</td>\n\n      Then when the play button is clicked the pause button should show.\n\n      <td class=\"song-track\">\n        <span class=\"track-number\">\n          1\n        </span>\n        <span class=\"play\">\n          <span>❙❙</span>\n        </span>\n      </td>\n      <td class=\"song-name\">Song name</td>\n      <td class=\"song-duration\">5:23</td>\n\n      When the pause button is clicked the play button should show again.\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    var step = __dependency2__[\"default\"];\n    var test = __dependency3__.test;\n\n    step(\"9\", \"Create a song-row component\");\n\n    test(\"the component shows the play button by default\", function() {\n      visit(\'album/1\');\n\n      andThen(function() {\n        equal(find(\'tr:first .play:contains(▶)\').length, 1, \"The play button is showing\");\n        equal(find(\'tr:first .play:contains(❙❙)\').length, 0, \"The pause button is not showing\");\n      });\n    });\n\n    test(\"the component toggles betwen the pause and play button when it\'s clicked\", function() {\n      expect(4);\n      visit(\'album/1\');\n\n      click(\'tr:first span:contains(▶)\');\n\n      andThen(function() {\n        equal(find(\'tr:first .play:contains(❙❙)\').length, 1, \"The pause button is showing\");\n        equal(find(\'tr:first .play:contains(▶)\').length, 0, \"The play button is not showing\");\n      });\n\n      click(\'tr:first span:contains(❙❙)\');\n\n      andThen(function() {\n        equal(find(\'tr:first .play:contains(▶)\').length, 1, \"The play button is showing\");\n        equal(find(\'tr:first .play:contains(❙❙)\').length, 0, \"The pause button is not showing\");\n      });\n    });\n  });//# sourceURL=bumbox/tests/integration/step-09-test.js");

;eval("define(\"bumbox/tests/integration/step-10-test\", \n  [\"ember\",\"ember-qunit\",\"bumbox/tests/helpers/assertions\",\"bumbox/tests/helpers/lookup\",\"bumbox/tests/helpers/step\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {\n    \"use strict\";\n    /*\n      In this step you\'ll create a player service to play songs in the browser.\n\n      For this step and others it may be helpful to learn about\n      the HTML audio element API:\n\n      https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio\n\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var propertyShouldBecome = __dependency3__.propertyShouldBecome;\n    var lookup = __dependency4__[\"default\"];\n    var step = __dependency5__[\"default\"];\n\n    var player;\n\n    step(\"10\", \"Create player service\", {\n      setup: function(app) {\n        player = lookup(app, \'service:player\');\n      }\n    });\n\n    test(\"Should have a player service\", function() {\n      ok(player instanceof Ember.Service, \"Player service is defined\");\n    });\n\n    test(\"Eventually isPlaying changes when the song is played\", function() {\n      expect(1);\n      var song = Ember.Object.create({url: \'audio/Southern_Nights_-_07_-_All_My_Sorrows.mp3\'});\n\n      propertyShouldBecome(player, \'isPlaying\', true);\n      player.play(song);\n    });\n\n    test(\"The song stops playing when the service is destroyed\", function() {\n      var song = Ember.Object.create({url: \'audio/Southern_Nights_-_07_-_All_My_Sorrows.mp3\'});\n\n      player.play(song);\n      Ember.run(player, player.destroy);\n\n      ok(player.get(\'audioElement\').paused, \'The audio element is paused\');\n      equal(player.get(\'audioElement\').src, document.baseURI, \'The audio element src has been wiped\');\n    });\n\n    test(\"Clicking a song-row play button plays a song\", function() {\n      visit(\'album/1\');\n      click(\'.song-track span:contains(▶)\');\n\n      return propertyShouldBecome(player, \'isPlaying\', true);\n    });\n\n    test(\"Eventually isPlaying becomes false when the song is paused\", function() {\n      var song = Ember.Object.create({url: \'audio/Southern_Nights_-_07_-_All_My_Sorrows.mp3\'});\n\n      player.play(song);\n      propertyShouldBecome(player, \'isPlaying\', true);\n\n      player.pause();\n      return propertyShouldBecome(player, \'isPlaying\', false);\n    });\n\n    test(\"Clicking the song-row pause button pauses the player\", function() {\n      visit(\'album/1\');\n      click(\'.song-track span:contains(▶)\');\n      propertyShouldBecome(player, \'isPlaying\', true);\n\n      click(\'.song-track span:contains(❙❙)\');\n      return propertyShouldBecome(player, \'isPlaying\', false);\n    });\n  });//# sourceURL=bumbox/tests/integration/step-10-test.js");

;eval("define(\"bumbox/tests/integration/step-11-test\", \n  [\"ember\",\"ember-data\",\"ember-qunit\",\"bumbox/tests/helpers/step\",\"bumbox/tests/helpers/start-app\",\"bumbox/tests/helpers/lookup\",\"bumbox/tests/helpers/assertions\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__) {\n    \"use strict\";\n    /*\n      In this step, we\'re going to change the way that our `{{song-row}}` component\n      works so that only one song shows as playing at a time. We\'ll also highlight\n      the currently playing song.\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    var DS = __dependency2__[\"default\"];\n    var test = __dependency3__.test;\n    var step = __dependency4__[\"default\"];\n    var startApp = __dependency5__[\"default\"];\n    var lookup = __dependency6__[\"default\"];\n    var exists = __dependency7__.exists;\n\n    var player;\n    var store;\n\n    step(11, \"Enhacing song-row\", {\n      setup: function(app) {\n        player = lookup(app, \'service:player\');\n        store = lookup(app, \'store:main\');\n      }\n    });\n\n    test(\"Clicking play on a song sets the song on the player service\", function() {\n      expect(2);\n      visit(\'/album/1\');\n      click(\'td.song-track:first span:contains(▶)\');\n\n      andThen(function() {\n        ok(player.get(\'song\') instanceof DS.Model, \"the player\'s song is an Ember Data model\");\n        equal(player.get(\'song.id\'), 11);\n      });\n    });\n\n    test(\"After clicking on a play button, the song gets the \'is-current-song\' class\", function() {\n      expect(1);\n      visit(\'/album/1\');\n      click(\'td.song-track:first span:contains(▶)\');\n\n      andThen(function() {\n        ok(exists(\'.album-listing tr:first.is-current-song\'), \"The first song is current\");\n      });\n    });\n\n    test(\"After playing 2 songs in succession\", function() {\n      expect(4);\n      visit(\'/album/1\');\n      click(\'.album-listing tr:nth-child(1) span:contains(▶)\');\n      click(\'.album-listing tr:nth-child(2) span:contains(▶)\');\n\n      andThen(function() {\n        ok(!exists(\'.album-listing tr:nth-child(1).is-current-song\'), \"The first song is not current\");\n        ok(exists(\'.album-listing tr:nth-child(2).is-current-song\'), \"The second song is current\");\n\n        ok(exists(\'.album-listing tr:nth-child(1) span:contains(▶)\'), \"The first song does have a play button\");\n        ok(!exists(\'.album-listing tr:nth-child(2) span:contains(▶)\'), \"The second song doesn\'t have a play button\");\n      });\n    });\n\n    test(\"After playing and then pausing a song\", function() {\n      expect(2);\n      visit(\'/album/1\');\n      click(\'.album-listing tr:first span:contains(▶)\');\n\n      andThen(function() {\n        ok(exists(\'.album-listing tr:first.is-current-song\'), \"The song is current\");\n        ok(!exists(\'.album-listing tr:first span:contains(▶)\'), \"The song doesn\'t have a play button\");\n      });\n    });\n  });//# sourceURL=bumbox/tests/integration/step-11-test.js");

;eval("define(\"bumbox/tests/integration/step-12-test\", \n  [\"ember\",\"ember-qunit\",\"bumbox/tests/helpers/step\",\"bumbox/tests/helpers/assertions\",\"bumbox/tests/helpers/lookup\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {\n    \"use strict\";\n    /*\n      In this step we\'re going to build the now-playing widget that stays at the\n      bottom of the screen as users move through the application.\n\n      Once a user starts playing a song, they should see information about that\n      song and associated album in this bottom bar.\n\n      If there is no song playing, the panel\'s HTML should look like this:\n\n          <footer class=\"now-playing\">\n            <span class=\"now-playing-empty\">Select a song to start playing.</span>\n          </footer>\n\n      If a song is playing, it should look like this:\n\n          <footer class=\"now-playing\">\n            <img class=\"now-playing-artwork\" src=\"<artwork-url>\">\n            <div class=\"now-playing-body\">\n              <p class=\"now-playing-details\">\n                <span class=\"now-playing-name\">Rude Boy</span> -\n                <span class=\"now-playing-artist\">Rihanna</span>\n              </p>\n              <div class=\"now-playing-player\">\n                <p class=\"duration\">\n                  song duration\n                </p>\n              </div>\n            </div>\n          </footer>\n\n      In order to show the current play time, you\'ll need to add a new property to\n      your player service using your audio element\'s `timeupdate` event and\n      `currentTime` property,\n\n      This `currentTime` property should return seconds as integers from your\n      service (no decimals) and you should use your format-durration helper in your\n      component\'s template to get your time in the right format.\n\n      Here are steps you can follow to implement this feature:\n\n      1. Extract the current footer markup from the application.hbs template\n         and replace it with a component called `{{now-playing}}` that renders\n         the same markup\n\n      2. Inject the player service into your `now-playing` component.\n\n      3. Use the property player.song and the `{{#if}}` template helper to show the\n         \"Select a song\" message when there is no song and the now-playing markup\n         shown above when there is a song.\n\n      4. Fill in the dummy values of the `now-playing` template with real values\n         from the `player.song` model. For now you may have to use paths that include\n         the album like this: \'player.song.album.artist\' but we\'ll show you how to\n         clean that up in the solution.\n\n      5. Add a currentTime property to the player service that defaults to zero.\n\n      6. Use the `audioElement`\'s \"timeupdate\" event to make a callback that updates\n         the `currentTime` of the player service. You can use `Math.floor` to make\n         sure that the currentTime is always an integer.\n\n      7. Replace the dummy \"song duration\" value in the template with the\n         currentTime property formatted with the `format-duration` helper.\n\n    */\n\n    var Ember = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var step = __dependency3__[\"default\"];\n    var exists = __dependency4__.exists;\n    var waitFor = __dependency4__.waitFor;\n    var contentOf = __dependency4__.contentOf;\n    var lookup = __dependency5__[\"default\"];\n\n    var player;\n    step(12, \"The now-playing component\", {\n      setup: function(app) {\n        player = lookup(app, \'service:player\');\n      }\n    });\n\n    test(\"The now-playing component is empty when no song is playing\", function() {\n      visit(\'/album/1\');\n\n      andThen(function() {\n        ok(exists(\'.now-playing .now-playing-empty\'), \"The now-playing component is empty when no song is playing\");\n      });\n    });\n\n    test(\"Playing a song should update the now-playing template\", function() {\n      visit(\'/album/1\');\n      click(\'td.song-track:first span:contains(▶)\');\n\n      andThen(function() {\n        ok(exists(\'.now-playing img.now-playing-artwork[src=\"images/the-morning-after.jpg\"]\'), \"The current song\'s artwork is showing\");\n        ok(exists(\'.now-playing div.now-playing-body span.now-playing-name:contains(A Walk)\'), \"The current song\'s name is showing\");\n        ok(exists(\'.now-playing div.now-playing-body span.now-playing-artist:contains(GOLDHOUSE)\'), \"The current song\'s artist is showing\");\n      });\n    });\n\n    test(\"The player\'s currentTime starts at 0\", function() {\n      equal(player.get(\'currentTime\'), 0, \"The player\'s currentTime starts at 0\");\n    });\n\n    test(\"The player\'s currentTime updates as a song plays showing seconds as integers\", function() {\n      expect(2);\n\n      var song = Ember.Object.create({\n        url: \"audio/Southern_Nights_-_07_-_All_My_Sorrows.mp3\"\n      });\n\n      player.play(song);\n\n      waitFor(player, \'currentTime\', function(time) {\n        ok(player.get(\'currentTime\') > 0, \"currentTime is increasing\");\n        ok(player.get(\'currentTime\') % 1 === 0, \"currentTime is an Integer\");\n      });\n    });\n\n    test(\"As a song plays the current time in the now-playing template is updated\", function() {\n      visit(\'/album/1\');\n      click(\'td.song-track:first span:contains(▶)\');\n\n      andThen(function() {\n        ok(contentOf(\'.now-playing .duration\').match(/\\d\\:\\d\\d/), \"The current time is shown\");\n      });\n    });\n  });//# sourceURL=bumbox/tests/integration/step-12-test.js");

;eval("define(\"bumbox/tests/integration/step-13-test\", \n  [\"ember-qunit\",\"bumbox/tests/helpers/step\",\"bumbox/tests/helpers/lookup\",\"bumbox/tests/helpers/assertions\",\"bumbox/tests/helpers/resolver\",\"ember\",\"bumbox/tests/helpers/start-app\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__) {\n    \"use strict\";\n    /*\n\n      In this step we\'re going to add a play and pause button to the\n      now-playing widget.\n\n      The markup for these buttons will be the same as the buttons\n      found in song-row, so we\'re going to extract another component\n      from the song-row component to finish this step.\n\n      Create a new component called `audio-control` that renders the\n      following HTML when a song is playing:\n\n        <span class=\"audio-control\">\n          <span {{action \'pause\'}}>❙❙</span>\n        </span>\n\n      And this HTML when the song is paused:\n\n        <span class=\"audio-control\">\n          <span {{action \'play\'}}>▶</span>\n        </span>\n\n      Once we have have this component in the {{now-playing}} template, we\'ll\n\n    */\n\n    var test = __dependency1__.test;\n    var moduleForComponent = __dependency1__.moduleForComponent;\n    var step = __dependency2__[\"default\"];\n    var lookup = __dependency3__[\"default\"];\n    var propertyShouldBecome = __dependency4__.propertyShouldBecome;\n    var exists = __dependency4__.exists;\n    var resolver = __dependency5__[\"default\"];\n    var Ember = __dependency6__[\"default\"];\n    var startApp = __dependency7__[\"default\"];\n\n    var App;\n    var player;\n    step(13, \"The audio-control component\", {\n      setup: function(app) {\n        App = app;\n        player = lookup(app, \'service:player\');\n      }\n    });\n\n    test(\"The now-playing component has a pause button when a song is playing\", function() {\n      visit(\'/album/1\');\n      click(\'td.song-track:first span:contains(▶)\');\n\n      andThen(function() {\n        ok(exists(\'.now-playing span:contains(❙❙)\'), \"The now-playing component is showing the pause button\");\n      });\n    });\n\n    test(\"Clicking the pause button\", function() {\n      visit(\'/album/1\');\n      click(\'td.song-track:first span:contains(▶)\');\n      click(\'.now-playing span:contains(❙❙)\');\n\n      andThen(function() {\n        ok(exists(\'.now-playing span:contains(▶)\'), \"The now-playing component is showing the play button\");\n        equal(player.get(\'isPlaying\'), false, \"The player service stopped playing\");\n      });\n    });\n\n    test(\"Resuming the current song\", function() {\n      visit(\'/album/1\');\n      click(\'td.song-track:first span:contains(▶)\');\n      click(\'.now-playing span:contains(❙❙)\');\n      click(\'.now-playing span:contains(▶)\');\n\n      andThen(function() {\n        equal(player.get(\'isPlaying\'), true, \"The player service is playing\");\n      });\n    });\n  });//# sourceURL=bumbox/tests/integration/step-13-test.js");

;eval("define(\"bumbox/tests/integration/step-14-test\", \n  [\"ember-qunit\",\"ember\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    /*\n      In this step you\'re going to write your own tests to add a feature that\n      allows users to toggle between the current and remaining time of a song in\n      the now-playing footer component.\n\n      * The currentTime is the ellapsed time of the song. Your player service\n        already exposes currentTime as a property.\n\n      * The remainingTime is the duration of the song minus the currentTime\n\n      Use the first test as an example of how to use moduleForComponent, then\n      write your own test and implement this feature.\n    */\n\n    var test = __dependency1__.test;\n    var moduleForComponent = __dependency1__.moduleForComponent;\n    var Ember = __dependency2__[\"default\"];\n\n    moduleForComponent(\'now-playing\', \"Step 14: Toggle ellapsed/current time\", {\n      needs: [\n        \'helper:format-duration\',\n        \'service:player\',\n        \'component:audio-control\',\n        \'template:components/audio-control\'\n      ],\n    });\n\n    test(\"when a song is loaded and the player is not playing, the component shows the song name\", function() {\n      var player = Ember.Object.extend().create();\n      var component = this.subject({player: player});\n\n      Ember.run(function() {\n        player.set(\'song\', {name: \'Song name\'});\n        player.set(\'isPlaying\', false);\n      });\n\n      equal(this.$().find(\'.play span:contains(▶)\').length, 1, \"The component should contain a play button\");\n      equal(this.$().find(\'.play span:contains(❙❙)\').length, 0, \"The component should not contain a pause button\");\n      equal(this.$().find(\'.now-playing-name\').text().trim(), \'Song name\', \"The component shows the song name\");\n    });\n\n    test(\"Toggling current and remaining time\", function() // TODO: IMPLEMENT THIS TEST\n    {\n\n      // TODO: IMPLEMENT THIS TEST\n\n    });\n  });//# sourceURL=bumbox/tests/integration/step-14-test.js");

;eval("define(\"bumbox/tests/models/album-fixtures.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - models\');\n    test(\'models/album-fixtures.js should pass jshint\', function() { \n      ok(false, \'models/album-fixtures.js should pass jshint.\\nmodels/album-fixtures.js: line 1, col 1, \\\'export\\\' is only available in ES6 (use esnext option).\\n\\n1 error\'); \n    });\n  });//# sourceURL=bumbox/tests/models/album-fixtures.jshint.js");

;eval("define(\"bumbox/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(false, \'router.js should pass jshint.\\nrouter.js: line 1, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\nrouter.js: line 2, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\nrouter.js: line 11, col 1, \\\'export\\\' is only available in ES6 (use esnext option).\\n\\n3 errors\'); \n    });\n  });//# sourceURL=bumbox/tests/router.jshint.js");

;eval("define(\"bumbox/tests/routes/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/application.js should pass jshint\', function() { \n      ok(false, \'routes/application.js should pass jshint.\\nroutes/application.js: line 1, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\nroutes/application.js: line 3, col 1, \\\'export\\\' is only available in ES6 (use esnext option).\\n\\n2 errors\'); \n    });\n  });//# sourceURL=bumbox/tests/routes/application.jshint.js");

;eval("define(\"bumbox/tests/serializers/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - serializers\');\n    test(\'serializers/application.js should pass jshint\', function() { \n      ok(false, \'serializers/application.js should pass jshint.\\nserializers/application.js: line 1, col 1, \\\'import\\\' is only available in ES6 (use esnext option).\\nserializers/application.js: line 3, col 1, \\\'export\\\' is only available in ES6 (use esnext option).\\n\\n2 errors\'); \n    });\n  });//# sourceURL=bumbox/tests/serializers/application.jshint.js");

;eval("define(\"bumbox/tests/test-helper\", \n  [\"bumbox/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.testTimeout = 4000;\n\n    QUnit.config.reorder = false;\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? \'hidden\' : \'visible\';\n    document.getElementById(\'ember-testing-container\').style.visibility = containerVisibility;\n  });//# sourceURL=bumbox/tests/test-helper.js");

/* jshint ignore:start */

define('bumbox/config/environment', ['ember'], function(Ember) {
  var prefix = 'bumbox';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */



});

if (runningTests) {
  require("bumbox/tests/test-helper");
} else {
  require("bumbox/app")["default"].create({"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true});
}



/* jshint ignore:end */
