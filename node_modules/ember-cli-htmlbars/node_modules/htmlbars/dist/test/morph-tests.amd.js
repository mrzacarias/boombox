define("htmlbars-test-helpers",
  ["exports"],
  function(__exports__) {
    "use strict";
    function equalInnerHTML(fragment, html) {
      var actualHTML = normalizeInnerHTML(fragment.innerHTML);
      QUnit.push(actualHTML === html, actualHTML, html);
    }

    __exports__.equalInnerHTML = equalInnerHTML;function equalHTML(node, html) {
      var fragment;
      if (!node.nodeType && node.length) {
        fragment = document.createDocumentFragment();
        while (node[0]) {
          fragment.appendChild(node[0]);
        }
      } else {
        fragment = node;
      }

      var div = document.createElement("div");
      div.appendChild(fragment.cloneNode(true));

      equalInnerHTML(div, html);
    }

    __exports__.equalHTML = equalHTML;// detect weird IE8 html strings
    var ie8InnerHTMLTestElement = document.createElement('div');
    ie8InnerHTMLTestElement.setAttribute('id', 'womp');
    var ie8InnerHTML = (ie8InnerHTMLTestElement.outerHTML.indexOf('id=womp') > -1);
    function normalizeInnerHTML(actualHTML) {
      if (ie8InnerHTML) {
        // drop newlines in IE8
        actualHTML = actualHTML.replace(/\r\n/gm, '');
        // downcase ALLCAPS tags in IE8
        actualHTML = actualHTML.replace(/<\/?[A-Z]+/gi, function(tag){
          return tag.toLowerCase();
        });
        // quote ids in IE8
        actualHTML = actualHTML.replace(/id=([^ >]+)/gi, function(match, id){
          return 'id="'+id+'"';
        });
      }
      return actualHTML;
    }

    __exports__.normalizeInnerHTML = normalizeInnerHTML;// detect weird IE8 checked element string
    var checkedInput = document.createElement('input');
    checkedInput.setAttribute('checked', 'checked');
    var checkedInputString = checkedInput.outerHTML;
    function isCheckedInputHTML(element) {
      equal(element.outerHTML, checkedInputString);
    }

    __exports__.isCheckedInputHTML = isCheckedInputHTML;
  });
define("htmlbars-test-helpers.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - .');
    test('htmlbars-test-helpers.js should pass jshint', function() { 
      ok(true, 'htmlbars-test-helpers.js should pass jshint.'); 
    });
  });
define("htmlbars-util",
  ["./htmlbars-util/safe-string","./htmlbars-util/handlebars/utils","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var SafeString = __dependency1__["default"];
    var escapeExpression = __dependency2__.escapeExpression;

    __exports__.SafeString = SafeString;
    __exports__.escapeExpression = escapeExpression;
  });
define("htmlbars-util.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - .');
    test('htmlbars-util.js should pass jshint', function() { 
      ok(true, 'htmlbars-util.js should pass jshint.'); 
    });
  });
define("htmlbars-util/array-utils",
  ["exports"],
  function(__exports__) {
    "use strict";
    function forEach(array, callback, binding) {
      var i;
      if (binding === undefined) {
        for (i = 0; i < array.length; i++) {
          callback(array[i], i, array);
        }
      } else {
        for (i = 0; i < array.length; i++) {
          callback.call(binding, array[i], i, array);
        }
      }
    }

    __exports__.forEach = forEach;
  });
define("htmlbars-util/array-utils.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - htmlbars-util');
    test('htmlbars-util/array-utils.js should pass jshint', function() { 
      ok(true, 'htmlbars-util/array-utils.js should pass jshint.'); 
    });
  });
define("htmlbars-util/handlebars/safe-string",
  ["exports"],
  function(__exports__) {
    "use strict";
    // Build out our basic SafeString type
    function SafeString(string) {
      this.string = string;
    }

    SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
      return "" + this.string;
    };

    __exports__["default"] = SafeString;
  });
define("htmlbars-util/handlebars/safe-string.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - htmlbars-util/handlebars');
    test('htmlbars-util/handlebars/safe-string.js should pass jshint', function() { 
      ok(true, 'htmlbars-util/handlebars/safe-string.js should pass jshint.'); 
    });
  });
define("htmlbars-util/handlebars/utils",
  ["./safe-string","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    /*jshint -W004 */
    var SafeString = __dependency1__["default"];

    var escape = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#x27;",
      "`": "&#x60;"
    };

    var badChars = /[&<>"'`]/g;
    var possible = /[&<>"'`]/;

    function escapeChar(chr) {
      return escape[chr];
    }

    function extend(obj /* , ...source */) {
      for (var i = 1; i < arguments.length; i++) {
        for (var key in arguments[i]) {
          if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
            obj[key] = arguments[i][key];
          }
        }
      }

      return obj;
    }

    __exports__.extend = extend;var toString = Object.prototype.toString;
    __exports__.toString = toString;
    // Sourced from lodash
    // https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
    var isFunction = function(value) {
      return typeof value === 'function';
    };
    // fallback for older versions of Chrome and Safari
    /* istanbul ignore next */
    if (isFunction(/x/)) {
      isFunction = function(value) {
        return typeof value === 'function' && toString.call(value) === '[object Function]';
      };
    }
    var isFunction;
    __exports__.isFunction = isFunction;
    /* istanbul ignore next */
    var isArray = Array.isArray || function(value) {
      return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;
    };
    __exports__.isArray = isArray;

    function escapeExpression(string) {
      // don't escape SafeStrings, since they're already safe
      if (string && string.toHTML) {
        return string.toHTML();
      } else if (string == null) {
        return "";
      } else if (!string) {
        return string + '';
      }

      // Force a string conversion as this will be done by the append regardless and
      // the regex test will do this transparently behind the scenes, causing issues if
      // an object's to string has escaped characters in it.
      string = "" + string;

      if(!possible.test(string)) { return string; }
      return string.replace(badChars, escapeChar);
    }

    __exports__.escapeExpression = escapeExpression;function isEmpty(value) {
      if (!value && value !== 0) {
        return true;
      } else if (isArray(value) && value.length === 0) {
        return true;
      } else {
        return false;
      }
    }

    __exports__.isEmpty = isEmpty;function appendContextPath(contextPath, id) {
      return (contextPath ? contextPath + '.' : '') + id;
    }

    __exports__.appendContextPath = appendContextPath;
  });
define("htmlbars-util/handlebars/utils.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - htmlbars-util/handlebars');
    test('htmlbars-util/handlebars/utils.js should pass jshint', function() { 
      ok(false, 'htmlbars-util/handlebars/utils.js should pass jshint.\nhtmlbars-util/handlebars/utils.js: line 58, col 23, Expected \'===\' and instead saw \'==\'.\nhtmlbars-util/handlebars/utils.js: line 2, col 8, \'SafeString\' is defined but never used.\n\n2 errors'); 
    });
  });
define("htmlbars-util/object-utils",
  ["exports"],
  function(__exports__) {
    "use strict";
    function merge(options, defaults) {
      for (var prop in defaults) {
        if (options.hasOwnProperty(prop)) { continue; }
        options[prop] = defaults[prop];
      }
      return options;
    }

    __exports__.merge = merge;
  });
define("htmlbars-util/object-utils.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - htmlbars-util');
    test('htmlbars-util/object-utils.js should pass jshint', function() { 
      ok(true, 'htmlbars-util/object-utils.js should pass jshint.'); 
    });
  });
define("htmlbars-util/quoting",
  ["exports"],
  function(__exports__) {
    "use strict";
    function escapeString(str) {
      str = str.replace(/\\/g, "\\\\");
      str = str.replace(/"/g, '\\"');
      str = str.replace(/\n/g, "\\n");
      return str;
    }

    __exports__.escapeString = escapeString;

    function string(str) {
      return '"' + escapeString(str) + '"';
    }

    __exports__.string = string;

    function array(a) {
      return "[" + a + "]";
    }

    __exports__.array = array;

    function hash(pairs) {
      return "{" + pairs.join(", ") + "}";
    }

    __exports__.hash = hash;function repeat(chars, times) {
      var str = "";
      while (times--) {
        str += chars;
      }
      return str;
    }

    __exports__.repeat = repeat;
  });
define("htmlbars-util/quoting.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - htmlbars-util');
    test('htmlbars-util/quoting.js should pass jshint', function() { 
      ok(true, 'htmlbars-util/quoting.js should pass jshint.'); 
    });
  });
define("htmlbars-util/safe-string",
  ["./handlebars/safe-string","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var SafeString = __dependency1__["default"];

    __exports__["default"] = SafeString;
  });
define("htmlbars-util/safe-string.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - htmlbars-util');
    test('htmlbars-util/safe-string.js should pass jshint', function() { 
      ok(true, 'htmlbars-util/safe-string.js should pass jshint.'); 
    });
  });
define("morph-tests/dom-helper-test",
  ["../morph","../htmlbars-test-helpers"],
  function(__dependency1__, __dependency2__) {
    "use strict";
    var DOMHelper = __dependency1__.DOMHelper;
    var equalHTML = __dependency2__.equalHTML;
    var isCheckedInputHTML = __dependency2__.isCheckedInputHTML;

    var xhtmlNamespace = "http://www.w3.org/1999/xhtml",
        svgNamespace   = "http://www.w3.org/2000/svg";

    var foreignNamespaces = ['foreignObject', 'desc', 'title'];

    var dom, i, foreignNamespace;

    QUnit.module('morph: DOM Helper', {
      setup: function() {
        dom = new DOMHelper();
      },
      teardown: function() {
        dom = null;
      }
    });

    test('#createElement', function(){
      var node = dom.createElement('div');
      equal(node.tagName, 'DIV');
      equalHTML(node, '<div></div>');
    });

    test('#appendText adds text', function(){
      var node = dom.createElement('div');
      var text = dom.appendText(node, 'Howdy');
      ok(!!text, 'returns node');
      equalHTML(node, '<div>Howdy</div>');
    });

    test('#setAttribute', function(){
      var node = dom.createElement('div');
      dom.setAttribute(node, 'id', 'super-tag');
      equalHTML(node, '<div id="super-tag"></div>');
      dom.setAttribute(node, 'id', null);
      equalHTML(node, '<div id="null"></div>');

      node = dom.createElement('input');
      dom.setAttribute(node, 'disabled', true);
      equalHTML(node, '<input disabled="true">');
      dom.setAttribute(node, 'disabled', false);
      equalHTML(node, '<input disabled="false">');
    });

    test('#getElementById', function() {
      var parentNode = dom.createElement('div'),
          childNode = dom.createElement('div');
      dom.setAttribute(parentNode, 'id', 'parent');
      dom.setAttribute(childNode, 'id', 'child');
      dom.appendChild(parentNode, childNode);
      dom.document.body.appendChild(parentNode);
      equalHTML(dom.getElementById('child'), '<div id="child"></div>');
      dom.document.body.removeChild(parentNode);
    });

    test('#setProperty', function(){
      var node = dom.createElement('div');
      dom.setProperty(node, 'id', 'super-tag');
      equalHTML(node, '<div id="super-tag"></div>');

      node = dom.createElement('input');
      dom.setProperty(node, 'disabled', true);
      equalHTML(node, '<input disabled="">');
      dom.setProperty(node, 'disabled', false);
      equalHTML(node, '<input>');
    });

    test('#removeAttribute', function(){
      var node = dom.createElement('div');
      dom.setAttribute(node, 'id', 'super-tag');
      equalHTML(node, '<div id="super-tag"></div>', 'precond - attribute exists');


      dom.removeAttribute(node, 'id');
      equalHTML(node, '<div></div>', 'attribute was removed');
    });

    test('#addClasses', function(){
      var node = dom.createElement('div');
      dom.addClasses(node, ['super-fun']);
      equal(node.className, 'super-fun');
      dom.addClasses(node, ['super-fun']);
      equal(node.className, 'super-fun');
      dom.addClasses(node, ['super-blast']);
      equal(node.className, 'super-fun super-blast');
      dom.addClasses(node, ['bacon', 'ham']);
      equal(node.className, 'super-fun super-blast bacon ham');
    });

    test('#removeClasses', function(){
      var node = dom.createElement('div');
      node.setAttribute('class', 'this-class that-class');
      dom.removeClasses(node, ['this-class']);
      equal(node.className, 'that-class');
      dom.removeClasses(node, ['this-class']);
      equal(node.className, 'that-class');
      dom.removeClasses(node, ['that-class']);
      equal(node.className, '');
      node.setAttribute('class', 'woop moop jeep');
      dom.removeClasses(node, ['moop', 'jeep']);
      equal(node.className, 'woop');
    });

    test('#createElement of tr with contextual table element', function(){
      var tableElement = document.createElement('table'),
          node = dom.createElement('tr', tableElement);
      equal(node.tagName, 'TR');
      equalHTML(node, '<tr></tr>');
    });

    test('#createMorph has optional contextualElement', function(){
      var parent = document.createElement('div'),
          fragment = document.createDocumentFragment(),
          start = document.createTextNode(''),
          end = document.createTextNode(''),
          morph, thrown;

      try {
        morph = dom.createMorph(fragment, start, end, fragment);
      } catch(e) {
        thrown = true;
      }
      ok(thrown, 'Exception thrown when a fragment is provided for contextualElement');

      morph = dom.createMorph(fragment, start, end, parent);
      equal(morph.contextualElement, parent, "morph's contextualElement is parent");

      morph = dom.createMorph(parent, start, end);
      equal(morph.contextualElement, parent, "morph's contextualElement is parent");
    });

    test('#appendMorph', function(){
      var element = document.createElement('div');

      dom.appendText(element, 'a');
      var morph = dom.appendMorph(element);
      dom.appendText(element, 'c');

      morph.update('b');

      equal(element.innerHTML, 'abc');
    });

    test('#insertMorphBefore', function(){
      var element = document.createElement('div');

      dom.appendText(element, 'a');
      var c = dom.appendText(element, 'c');
      var morph = dom.insertMorphBefore(element, c);

      morph.update('b');

      equal(element.innerHTML, 'abc');
    });

    test('#parseHTML combinations', function(){
      var parsingCombinations = [
        // omitted start tags
        //
        ['table', '<tr><td>Yo</td></tr>', 'TR'],
        ['table', '<tbody><tr></tr></tbody>', 'TBODY'],
        ['table', '<col></col>', 'COL'],
        // elements with broken innerHTML in IE9 and down
        ['select', '<option></option>', 'OPTION'],
        ['colgroup', '<col></col>', 'COL'],
        ['tbody', '<tr></tr>', 'TR'],
        ['tfoot', '<tr></tr>', 'TR'],
        ['thead', '<tr></tr>', 'TR'],
        ['tr', '<td></td>', 'TD'],
        ['div', '<script></script>', 'SCRIPT']
      ];

      var contextTag, content, expectedTagName, contextElement, nodes;
      for (var p=0;p<parsingCombinations.length;p++) {
        contextTag = parsingCombinations[p][0];
        content = parsingCombinations[p][1];
        expectedTagName = parsingCombinations[p][2];

        contextElement = document.createElement(contextTag);
        nodes = dom.parseHTML(content, contextElement);
        equal(
          nodes[0].tagName, expectedTagName,
          '#parseHTML of '+content+' returns a '+expectedTagName+' inside a '+contextTag+' context' );
      }
    });

    test('#parseHTML of script then tr inside table context wraps the tr in a tbody', function(){
      var tableElement = document.createElement('table'),
          nodes = dom.parseHTML('<script></script><tr><td>Yo</td></tr>', tableElement);
      // The HTML spec suggests the first item must be the child of
      // the omittable start tag. Here script is the first child, so no-go.
      equal(nodes.length, 2, 'Leading script tag corrupts');
      equal(nodes[0].tagName, 'SCRIPT');
      equal(nodes[1].tagName, 'TBODY');
    });

    test('#parseHTML of select allows the initial implicit option selection to remain', function(){
      var div = document.createElement('div');
      var select = dom.parseHTML('<select><option></option></select>', div)[0];

      ok(select.childNodes[0].selected, 'first element is selected');
    });

    test('#parseHTML of options removes an implicit selection', function(){
      var select = document.createElement('select');
      var options = dom.parseHTML(
        '<option value="1"></option><option value="2"></option>',
        select
      );

      ok(!options[0].selected, 'first element is not selected');
      ok(!options[1].selected, 'second element is not selected');
    });

    test('#parseHTML of options leaves an explicit first selection', function(){
      var select = document.createElement('select');
      var options = dom.parseHTML(
        '<option value="1" selected></option><option value="2"></option>',
        select
      );

      ok(options[0].selected, 'first element is selected');
      ok(!options[1].selected, 'second element is not selected');
    });

    test('#parseHTML of options leaves an explicit second selection', function(){
      var select = document.createElement('select');
      var options = dom.parseHTML(
        '<option value="1"></option><option value="2" selected="selected"></option>',
        select
      );

      ok(!options[0].selected, 'first element is not selected');
      ok(options[1].selected, 'second element is selected');
    });

    test('#parseHTML of script then tr inside tbody context', function(){
      var tbodyElement = document.createElement('tbody'),
          nodes = dom.parseHTML('<script></script><tr><td>Yo</td></tr>', tbodyElement);
      equal(nodes.length, 2, 'Leading script tag corrupts');
      equal(nodes[0].tagName, 'SCRIPT');
      equal(nodes[1].tagName, 'TR');
    });

    test('#parseHTML with retains whitespace', function(){
      var div = document.createElement('div');
      var nodes = dom.parseHTML('leading<script id="first"></script> <script id="second"></script><div><script></script> <script></script>, indeed.</div>', div);
      equal(nodes[0].data, 'leading');
      equal(nodes[1].tagName, 'SCRIPT');
      equal(nodes[2].data, ' ');
      equal(nodes[3].tagName, 'SCRIPT');
      equal(nodes[4].tagName, 'DIV');
      equal(nodes[4].childNodes[0].tagName, 'SCRIPT');
      equal(nodes[4].childNodes[1].data, ' ');
      equal(nodes[4].childNodes[2].tagName, 'SCRIPT');
      equal(nodes[4].childNodes[3].data, ', indeed.');
    });

    test('#parseHTML with retains whitespace of top element', function(){
      var div = document.createElement('div');
      var nodes = dom.parseHTML('<span>hello <script id="first"></script> yeah</span>', div);
      equal(nodes[0].tagName, 'SPAN');
      equalHTML(nodes, '<span>hello <script id="first"></script> yeah</span>');
    });

    test('#parseHTML with retains whitespace after script', function(){
      var div = document.createElement('div');
      var nodes = dom.parseHTML('<span>hello</span><script id="first"></script><span><script></script> kwoop</span>', div);
      equal(nodes[0].tagName, 'SPAN');
      equal(nodes[1].tagName, 'SCRIPT');
      equal(nodes[2].tagName, 'SPAN');
      equalHTML(nodes, '<span>hello</span><script id="first"></script><span><script></script> kwoop</span>');
    });

    test('#cloneNode shallow', function(){
      var divElement = document.createElement('div');

      divElement.appendChild( document.createElement('span') );

      var node = dom.cloneNode(divElement, false);

      equal(node.tagName, 'DIV');
      equalHTML(node, '<div></div>');
    });

    test('#cloneNode deep', function(){
      var divElement = document.createElement('div');

      divElement.appendChild( document.createElement('span') );

      var node = dom.cloneNode(divElement, true);

      equal(node.tagName, 'DIV');
      equalHTML(node, '<div><span></span></div>');
    });

    test('dom node has empty text after cloning and ensuringBlankTextNode', function(){
      var div = document.createElement('div');

      div.appendChild( document.createTextNode('') );

      var clonedDiv = dom.cloneNode(div, true);

      equal(clonedDiv.nodeType, 1);
      equalHTML(clonedDiv, '<div></div>');
      // IE's native cloneNode drops blank string text
      // nodes. Assert repairClonedNode brings back the blank
      // text node.
      dom.repairClonedNode(clonedDiv, [0]);
      equal(clonedDiv.childNodes.length, 1);
      equal(clonedDiv.childNodes[0].nodeType, 3);
    });

    test('dom node has empty start text after cloning and ensuringBlankTextNode', function(){
      var div = document.createElement('div');

      div.appendChild( document.createTextNode('') );
      div.appendChild( document.createElement('span') );

      var clonedDiv = dom.cloneNode(div, true);

      equal(clonedDiv.nodeType, 1);
      equalHTML(clonedDiv, '<div><span></span></div>');
      // IE's native cloneNode drops blank string text
      // nodes. Assert denormalizeText brings back the blank
      // text node.
      dom.repairClonedNode(clonedDiv, [0]);
      equal(clonedDiv.childNodes.length, 2);
      equal(clonedDiv.childNodes[0].nodeType, 3);
    });

    test('dom node checked after cloning and ensuringChecked', function(){
      var input = document.createElement('input');

      input.setAttribute('checked', 'checked');
      ok(input.checked, 'input is checked');

      var clone = dom.cloneNode(input, false);

      // IE's native cloneNode copies checked attributes but
      // not the checked property of the DOM node.
      dom.repairClonedNode(clone, [], true);

      isCheckedInputHTML(clone, '<input checked="checked">');
      ok(clone.checked, 'clone is checked');
    });

    if ('namespaceURI' in document.createElement('div')) {

    QUnit.module('morph: DOM Helper namespaces', {
      setup: function() {
        dom = new DOMHelper();
      },
      teardown: function() {
        dom = null;
      }
    });

    test('#createElement div is xhtml', function(){
      var node = dom.createElement('div');
      equal(node.namespaceURI, xhtmlNamespace);
    });

    test('#createElement of svg with svg namespace', function(){
      dom.setNamespace(svgNamespace);
      var node = dom.createElement('svg');
      equal(node.tagName, 'svg');
      equal(node.namespaceURI, svgNamespace);
    });

    test('#createElement of path with detected svg contextual element', function(){
      dom.setNamespace(svgNamespace);
      var node = dom.createElement('path');
      equal(node.tagName, 'path');
      equal(node.namespaceURI, svgNamespace);
    });

    test('#createElement of path with svg contextual element', function(){
      var node = dom.createElement('path', document.createElementNS(svgNamespace, 'svg'));
      equal(node.tagName, 'path');
      equal(node.namespaceURI, svgNamespace);
    });

    test('#createElement of svg with div namespace', function(){
      var node = dom.createElement('svg', document.createElement('div'));
      equal(node.tagName, 'svg');
      equal(node.namespaceURI, svgNamespace);
    });

    for (i=0;i<foreignNamespaces.length;i++) {
      foreignNamespace = foreignNamespaces[i];

      test('#createElement of div with '+foreignNamespace+' contextual element', function(){
        var node = dom.createElement('div', document.createElementNS(svgNamespace, foreignNamespace));
        equal(node.tagName, 'DIV');
        equal(node.namespaceURI, xhtmlNamespace);
      }); // jshint ignore:line

      test('#parseHTML of div with '+foreignNamespace, function(){
        dom.setNamespace(xhtmlNamespace);
        var foreignObject = document.createElementNS(svgNamespace, foreignNamespace),
            nodes = dom.parseHTML('<div></div>', foreignObject);
        equal(nodes[0].tagName, 'DIV');
        equal(nodes[0].namespaceURI, xhtmlNamespace);
      }); // jshint ignore:line
    }

    test('#parseHTML of path with svg contextual element', function(){
      dom.setNamespace(svgNamespace);
      var svgElement = document.createElementNS(svgNamespace, 'svg'),
          nodes = dom.parseHTML('<path></path>', svgElement);
      equal(nodes[0].tagName, 'path');
      equal(nodes[0].namespaceURI, svgNamespace);
    });

    test('#parseHTML of stop with linearGradient contextual element', function(){
      dom.setNamespace(svgNamespace);
      var svgElement = document.createElementNS(svgNamespace, 'linearGradient'),
          nodes = dom.parseHTML('<stop />', svgElement);
      equal(nodes[0].tagName, 'stop');
      equal(nodes[0].namespaceURI, svgNamespace);
    });

    test('#addClasses on SVG', function(){
      var node = document.createElementNS(svgNamespace, 'svg');
      dom.addClasses(node, ['super-fun']);
      equal(node.getAttribute('class'), 'super-fun');
      dom.addClasses(node, ['super-fun']);
      equal(node.getAttribute('class'), 'super-fun');
      dom.addClasses(node, ['super-blast']);
      equal(node.getAttribute('class'), 'super-fun super-blast');
    });

    test('#removeClasses on SVG', function(){
      var node = document.createElementNS(svgNamespace, 'svg');
      node.setAttribute('class', 'this-class that-class');
      dom.removeClasses(node, ['this-class']);
      equal(node.getAttribute('class'), 'that-class');
      dom.removeClasses(node, ['this-class']);
      equal(node.getAttribute('class'), 'that-class');
      dom.removeClasses(node, ['that-class']);
      equal(node.getAttribute('class'), '');
    });


    }
  });
define("morph-tests/dom-helper-test.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - morph-tests');
    test('morph-tests/dom-helper-test.js should pass jshint', function() { 
      ok(true, 'morph-tests/dom-helper-test.js should pass jshint.'); 
    });
  });
define("morph-tests/morph-test",
  ["../htmlbars-test-helpers","../htmlbars-util/safe-string","../morph/dom-helper"],
  function(__dependency1__, __dependency2__, __dependency3__) {
    "use strict";
    var equalHTML = __dependency1__.equalHTML;
    var equalInnerHTML = __dependency1__.equalInnerHTML;
    var SafeString = __dependency2__["default"];
    var DOMHelper = __dependency3__["default"];

    var domHelper = new DOMHelper();

    function morphTests(factory) {
      test('updateNode '+factory.name, function () {
        var fixture = document.getElementById('qunit-fixture'),
          setup = factory.create(),
          fragment = setup.fragment,
          morph = setup.morph,
          startHTML = setup.startHTML,
          endHTML = setup.endHTML,
          html;

        morph.updateNode(element('p', 'updated'));

        html = startHTML+'<p>updated</p>'+endHTML;

        equalHTML(fragment, html);

        fixture.appendChild(setup.fragment);

        morph.updateNode(element('p', 'updated again'));

        html = startHTML+'<p>updated again</p>'+endHTML;

        equalInnerHTML(fixture, html);
      });

      test('updateText '+factory.name, function () {
        var fixture = document.getElementById('qunit-fixture'),
          setup = factory.create(),
          fragment = setup.fragment,
          morph = setup.morph,
          startHTML = setup.startHTML,
          endHTML = setup.endHTML,
          html;

        morph.updateText('updated');

        html = startHTML+'updated'+endHTML;

        equalHTML(fragment, html);

        fixture.appendChild(fragment);

        morph.updateText('updated again');

        html = startHTML+'updated again'+endHTML;

        equalInnerHTML(fixture, html);
      });

      test('updateHTML '+factory.name, function () {
        var fixture = document.getElementById('qunit-fixture'),
          setup = factory.create(),
          fragment = setup.fragment,
          morph = setup.morph,
          startHTML = setup.startHTML,
          endHTML = setup.endHTML,
          html;

        morph.updateHTML('<p>A</p><p>B</p><p>C</p>');

        html = startHTML+'<p>A</p><p>B</p><p>C</p>'+endHTML;

        equalHTML(fragment, html);

        fixture.appendChild(fragment);

        morph.updateHTML('<p>updated</p>');

        html = startHTML+'<p>updated</p>'+endHTML;

        equalInnerHTML(fixture, html);
      });

      test('destroy '+factory.name, function () {
        var setup = factory.create(),
          fragment = setup.fragment,
          morph = setup.morph,
          startHTML = setup.startHTML,
          endHTML = setup.endHTML,
          html;

        morph.destroy();

        html = startHTML+endHTML;

        equalHTML(fragment, html);
      });

      test('destroy after insert '+factory.name, function () {
        var fixture = document.getElementById('qunit-fixture'),
          setup = factory.create(),
          fragment = setup.fragment,
          morph = setup.morph,
          startHTML = setup.startHTML,
          endHTML = setup.endHTML,
          html;

        fixture.appendChild(fragment);

        morph.destroy();

        html = startHTML+endHTML;

        equalInnerHTML(fixture, html);
      });

      test('update '+factory.name, function () {
        var div = document.createElement('div'),
          setup = factory.create(),
          fragment = setup.fragment,
          morph = setup.morph,
          startHTML = setup.startHTML,
          endHTML = setup.endHTML,
          html;

        morph.update(element('p', 'updated'));
        html = startHTML+'<p>updated</p>'+endHTML;
        equalHTML(fragment, html);

        morph.update('updated');
        html = startHTML+'updated'+endHTML;
        equalHTML(fragment, html);

        morph.update(new SafeString('<p>updated</p>'));
        html = startHTML+'<p>updated</p>'+endHTML;
        equalHTML(fragment, html);

        var duckTypedSafeString = {
          string: '<div>updated</div>'
        };
        morph.update(duckTypedSafeString);
        html = startHTML+'<div>updated</div>'+endHTML;
        equalHTML(fragment, html);

        var newFrag = document.createDocumentFragment();
        newFrag.appendChild(fragment);

        morph.update('oh hai');
        html = startHTML+'oh hai'+endHTML;
        equalHTML(newFrag, html);

        morph.update('oh bai');
        html = startHTML+'oh bai'+endHTML;
        equalHTML(newFrag, html);

        div.appendChild(newFrag);

        morph.update('oh hai');
        html = '<div>'+startHTML+'oh hai'+endHTML+'</div>';
        equalHTML(div, html);

        morph.update('oh bai');
        html = '<div>'+startHTML+'oh bai'+endHTML+'</div>';
        equalHTML(div, html);
      });
    }

    function checkChildMorphState(morph) {
      var morphs = morph.morphs, i, l;
      for (i=0, l=morphs.length; i<l; i++) {
        if (i === 0) {
          equal(morphs[i].before, null);
          equal(morphs[i].start, morph.start);
        } else {
          equal(morphs[i].before, morphs[i-1]);
          equal(morphs[i].start, morphs[i-1].end.previousSibling);
        }

        if (i === l-1) {
          equal(morphs[i].end, morph.end);
          equal(morphs[i].after, null);
        } else {
          equal(morphs[i].end,   morphs[i+1].start.nextSibling);
          equal(morphs[i].after, morphs[i+1]);
        }
      }
    }

    function morphListTests(factory) {
      test('various list operations with fragments '+factory.name, function () {
        var fixture = document.getElementById('qunit-fixture'),
          setup = factory.create(),
          fragment = setup.fragment,
          morph = setup.morph,
          startHTML = setup.startHTML,
          endHTML = setup.endHTML,
          html;

        var A = element('p', 'A');
        var B = element('p', 'B');
        var C = element('p', 'C');
        var D = element('p', 'D');
        var E = element('p', 'E');
        var F = element('p', 'F');

        var fragmentABC = fragmentFor(A,B,C);
        var fragmentEF = fragmentFor(E,F);

        morph.replace(0, 0, [fragmentABC, D, fragmentEF]);

        var morphs = morph.morphs;

        html = startHTML+'<p>A</p><p>B</p><p>C</p><p>D</p><p>E</p><p>F</p>'+endHTML;
        equalHTML(fragment, html);
        equal(morphs[0].start, morph.start);
        equal(morphs[0].end, D);
        equal(morphs[1].start, C);
        equal(morphs[1].end, E);
        equal(morphs[2].start, D);
        equal(morphs[2].end, morph.end);

        morph.append(new SafeString('<b>G</b>'));
        morph.append(element('i', 'H'));
        morph.append('I');
        morph.append(fragmentFor(element('p','J'),element('p','K')));

        html = startHTML+'<p>A</p><p>B</p><p>C</p><p>D</p><p>E</p><p>F</p><b>G</b><i>H</i>I<p>J</p><p>K</p>'+endHTML;
        equalHTML(fragment, html);
        equal(morphs.length, 7);
        checkChildMorphState(morph);

        var end = morph.insert(7, 'end');
        var middle = morph.insert(4, 'middle');
        var begin = morph.insert(0, 'begin');

        html = startHTML+'<p>A</p><p>B</p><p>C</p><p>D</p><p>E</p><p>F</p><b>G</b><i>H</i>I<p>J</p><p>K</p>'+endHTML;

        equal(morphs.length, 10);
        checkChildMorphState(morph);

        morph.removeMorph(begin);
        morph.removeMorph(middle);
        morph.removeMorph(end);

        morph.replace(1,6);

        html = startHTML+'<p>A</p><p>B</p><p>C</p>'+endHTML;
        equalHTML(fragment, html);
        equal(morphs.length, 1);
        checkChildMorphState(morph);

        morph.replace(1,0,['D', '', null, 'E', new SafeString('<p>F</p>')]);
        html = startHTML+'<p>A</p><p>B</p><p>C</p>DE<p>F</p>'+endHTML;
        equalHTML(fragment, html);

        equal(morph.morphs.length, 6);
        checkChildMorphState(morph);

        morphs[3].destroy();
        morphs[3].update(element('i', 'E'));
        morphs[1].update(element('b', 'D'));
        morphs[2].destroy();

        html = startHTML+'<p>A</p><p>B</p><p>C</p><b>D</b><i>E</i><p>F</p>'+endHTML;
        equalHTML(fragment, html);
        equal(morph.morphs.length, 4);
        checkChildMorphState(morph);

        fixture.appendChild(fragment);

        morph.replace(2,2);

        morphs[1].update(
          fragmentFor(
            element('p','D'),
            element('p','E'),
            element('p','F')
          )
        );

        html = startHTML+'<p>A</p><p>B</p><p>C</p><p>D</p><p>E</p><p>F</p>'+endHTML;
        equalInnerHTML(fixture, html);

        equal(morph.morphs.length, 2);
        checkChildMorphState(morph);

        morph.replace(1,0,['between']);

        html = startHTML+'<p>A</p><p>B</p><p>C</p>between<p>D</p><p>E</p><p>F</p>'+endHTML;
        equalInnerHTML(fixture, html);
        equal(morph.morphs.length, 3);
        checkChildMorphState(morph);
      });
    }

    function fragmentFor() {
      var fragment = document.createDocumentFragment();
      for (var i=0,l=arguments.length; i<l; i++) {
        fragment.appendChild(arguments[i]);
      }
      return fragment;
    }

    function element(tag, text) {
      var el = document.createElement(tag);
      el.appendChild(document.createTextNode(text));
      return el;
    }

    var parents = [
      {
        name: 'with parent as an element',
        create: function (frag) {
          var parent = document.createElement('div');
          frag.appendChild(parent);
          return parent;
        },
        startHTML: '<div>',
        endHTML: '</div>'
      },
      {
        name: 'with parent as a fragment',
        create: function (frag) {
          return frag;
        },
        startHTML: '',
        endHTML: ''
      }
    ];

    var starts = [
      {
        name: 'with sibling before',
        create: function (parent) {
          var start = document.createTextNode('Some text before ');
          parent.appendChild(start);
          return parent.childNodes.length-1;
        },
        HTML: 'Some text before '
      },
      {
        name: 'with no sibling before',
        create: function () {
          return -1;
        },
        HTML: ''
      }
    ];

    var ends = [
      {
        name: 'and sibling after',
        create: function (parent) {
          var end = document.createTextNode(' some text after.');
          parent.appendChild(end);
          return parent.childNodes.length-1;
        },
        HTML: ' some text after.'
      },
      {
        name: 'and no sibling after',
        create: function () {
          return -1;
        },
        HTML: ''
      }
    ];

    var contents = [
      {
        name: 'with an empty Morph',
        create: function () { },
        HTML: ''
      },
      {
        name: 'with some paragraphs in the Morph',
        create: function (parent) {
          var p;
          p = document.createElement('p');
          p.textContent = 'a';
          parent.appendChild(p);
          p = document.createElement('p');
          p.textContent = 'b';
          parent.appendChild(p);
          p = document.createElement('p');
          p.textContent = 'c';
          parent.appendChild(p);
        },
        HTML: '<p>a</p><p>b</p><p>c</p>'
      }
    ];

    function iterateCombinations(parents, starts, ends, contents, callback) {
      function buildFactory(parentFactory, startFactory, endFactory, contentFactory) {
        return {
          name: [parentFactory.name, startFactory.name, endFactory.name, contentFactory.name].join(' '),
          create: function factory() {
            var fragment = document.createDocumentFragment(),
            parent = parentFactory.create(fragment),
            startIndex = startFactory.create(parent),
            endIndex = endFactory.create(parent);

            // this is prevented in the parser by generating
            // empty text nodes at boundaries of fragments

            if (parent === fragment && (startIndex === -1 || endIndex === -1)) {
              return null;
            }

            return {
              fragment: fragment,
              morph: domHelper.createMorphAt(parent, startIndex, endIndex, document.body),
              startHTML: parentFactory.startHTML + startFactory.HTML,
              contentHTML: contentFactory.HTML,
              endHTML: endFactory.HTML + parentFactory.endHTML
            };
          }
        };
      }

      for (var i=0; i<parents.length; i++) {
        for (var j=0; j<starts.length; j++) {
          for (var k=0; k<ends.length; k++) {
            for (var l=0; l<contents.length; l++) {
              var factory = buildFactory(parents[i], starts[j], ends[k], contents[l]);
              if (factory.create() === null) {
                continue; // unsupported combo
              }
              callback(factory);
            }
          }
        }
      }
    }

    QUnit.module('morph: Morph');
    iterateCombinations(parents, starts, ends, contents, morphTests);

    QUnit.module('morph: MorphList');
    iterateCombinations(parents, starts, ends, [{name:'', create: function(){},HTML:''}], morphListTests);
  });
define("morph-tests/morph-test.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - morph-tests');
    test('morph-tests/morph-test.js should pass jshint', function() { 
      ok(true, 'morph-tests/morph-test.js should pass jshint.'); 
    });
  });
define("morph-tests/morph.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - morph-tests');
    test('morph-tests/morph.js should pass jshint', function() { 
      ok(true, 'morph-tests/morph.js should pass jshint.'); 
    });
  });
define("morph-tests/morph/dom-helper.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - morph-tests/morph');
    test('morph-tests/morph/dom-helper.js should pass jshint', function() { 
      ok(true, 'morph-tests/morph/dom-helper.js should pass jshint.'); 
    });
  });
define("morph-tests/morph/dom-helper/build-html-dom.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - morph-tests/morph/dom-helper');
    test('morph-tests/morph/dom-helper/build-html-dom.js should pass jshint', function() { 
      ok(true, 'morph-tests/morph/dom-helper/build-html-dom.js should pass jshint.'); 
    });
  });
define("morph-tests/morph/dom-helper/classes.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - morph-tests/morph/dom-helper');
    test('morph-tests/morph/dom-helper/classes.js should pass jshint', function() { 
      ok(true, 'morph-tests/morph/dom-helper/classes.js should pass jshint.'); 
    });
  });
define("morph-tests/morph/morph.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - morph-tests/morph');
    test('morph-tests/morph/morph.js should pass jshint', function() { 
      ok(true, 'morph-tests/morph/morph.js should pass jshint.'); 
    });
  });